<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Speech Recognition</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
    <script>
        // Initialize Supabase configuration
        window.SUPABASE_CONFIG = {
            url: '<%= process.env.SUPABASE_URL %>',
            key: '<%= process.env.SUPABASE_ANON_KEY %>'
        };

        // Initialize Supabase client at the very top
        const supabase = window.supabase.createClient(
            window.SUPABASE_CONFIG.url,
            window.SUPABASE_CONFIG.key,
            {
                auth: {
                    autoRefreshToken: true,
                    persistSession: true,
                    detectSessionInUrl: true,
                    storage: window.localStorage // Explicitly use localStorage
                }
            }
        );

        // Add a function to ensure Supabase is initialized
        async function ensureSupabaseInitialized() {
            if (!supabase) {
                console.error('Supabase client not initialized');
                throw new Error('Supabase client not initialized');
            }
            return supabase;
        }

        console.log('Supabase client initialized with config:', {
            hasUrl: !!window.SUPABASE_CONFIG.url,
            hasKey: !!window.SUPABASE_CONFIG.key,
            urlLength: window.SUPABASE_CONFIG.url?.length,
            keyLength: window.SUPABASE_CONFIG.key?.length
        });

        // Add a function to initialize app state
        async function initializeAppState(session) {
            if (!session) {
                console.error('No session provided to initializeAppState');
                document.getElementById('authContainer').style.display = 'flex';
                document.getElementById('mainContent').style.display = 'none';
                return;
            }

            console.log('Initializing app state with session:', {
                hasSession: true,
                userEmail: session.user.email,
                userId: session.user.id
            });

            try {
                currentUser = session.user;
                currentSession = session;
                
                // Update UI
                document.getElementById('authContainer').style.display = 'none';
                document.getElementById('mainContent').style.display = 'block';
                updateUserProfile(session.user);

                // Initialize real-time subscriptions
                await initializeRealTimeSubscriptions(session);
                
                // Load user data
                await loadPastTranscripts();
                await loadMeetings();

                console.log('App state initialized successfully');
            } catch (error) {
                console.error('Error initializing app state:', error);
                // Don't clear the session here, let the auth state change handler handle that
                throw error;
            }
        }

        // Add function to initialize real-time subscriptions
        async function initializeRealTimeSubscriptions(session) {
            try {
                // Clean up any existing subscriptions
                if (transcriptsSubscription) {
                    console.log('Cleaning up existing subscription...');
                    transcriptsSubscription.unsubscribe();
                    transcriptsSubscription = null;
                }

                // Set up new subscription
                console.log('Setting up real-time subscription...');
                transcriptsSubscription = supabase
                    .channel('transcripts-changes')
                    .on(
                        'postgres_changes',
                        {
                            event: '*',
                            schema: 'public',
                            table: 'transcripts',
                            filter: `id=eq.${session.user.id}`
                        },
                        (payload) => {
                            console.log('Real-time update received:', payload);
                            handleTranscriptChange(payload);
                        }
                    )
                    .subscribe((status) => {
                        console.log('Subscription status:', status);
                    });
            } catch (error) {
                console.error('Error initializing real-time subscriptions:', error);
            }
        }

        // Check for existing session on page load
        document.addEventListener('DOMContentLoaded', async () => {
            try {
                console.log('Checking for existing session...');
                // Don't try to initialize app state here, let the auth state change handler do it
                const { data: { session }, error } = await supabase.auth.getSession();
                if (error) {
                    console.error('Error getting initial session:', error);
                    document.getElementById('authContainer').style.display = 'flex';
                    document.getElementById('mainContent').style.display = 'none';
                }
                // The auth state change handler will handle initialization if there's a session
            } catch (error) {
                console.error('Error during initialization:', error);
                document.getElementById('authContainer').style.display = 'flex';
                document.getElementById('mainContent').style.display = 'none';
            }
        });

        // Update auth state change handler
        supabase.auth.onAuthStateChange(async (event, session) => {
            console.log('Auth state changed:', {
                event,
                hasSession: !!session,
                userEmail: session?.user?.email
            });

            try {
                switch (event) {
                    case 'SIGNED_IN':
                    case 'TOKEN_REFRESHED':
                        if (session) {
                            console.log('Processing sign in/refresh with session:', {
                                userEmail: session.user.email,
                                userId: session.user.id
                            });
                            await initializeAppState(session);
                        }
                        break;

                    case 'SIGNED_OUT':
                        // Clean up resources
                        if (ws) {
                            ws.close();
                            ws = null;
                        }
                        if (transcriptsSubscription) {
                            transcriptsSubscription.unsubscribe();
                            transcriptsSubscription = null;
                        }
                        
                        // Clear state
                        currentUser = null;
                        currentSession = null;
                        fullTranscript = [];
                        meetingStartTime = null;
                        
                        // Update UI
                        document.getElementById('authContainer').style.display = 'flex';
                        document.getElementById('mainContent').style.display = 'none';
                        break;

                    case 'INITIAL_SESSION':
                        // Only initialize if we have a valid session
                        if (session) {
                            console.log('Initial session found, initializing app state');
                            await initializeAppState(session);
                        } else {
                            console.log('No initial session found, showing auth container');
                            document.getElementById('authContainer').style.display = 'flex';
                            document.getElementById('mainContent').style.display = 'none';
                        }
                        break;
                }
            } catch (error) {
                console.error('Error handling auth state change:', error);
                // Show auth container on error
                document.getElementById('authContainer').style.display = 'flex';
                document.getElementById('mainContent').style.display = 'none';
            }

            // Re-setup navigation after auth state changes
            setupNavigation();
        });

        // Global variables - declare these only once at the top level
        let currentUser = null;
        let ws = null;
        let fullTranscript = [];
        let meetingStartTime = new Date();
        let isRecording = false;  // Add isRecording variable
        window.speakerNames = new Map();

        // Add a global variable to store the current session
        let currentSession = null;

        // Add this after the supabase client initialization
        let transcriptsSubscription = null;

        // Navigation setup - Move this outside of DOMContentLoaded to ensure it's available
        function setupNavigation() {
            console.log('Setting up navigation...');
            const navItems = document.querySelectorAll('.nav-item');
            console.log('Found nav items:', navItems.length);

            navItems.forEach(item => {
                console.log('Setting up click handler for:', item.dataset.view);
                
                // Remove any existing click handlers
                const newItem = item.cloneNode(true);
                item.parentNode.replaceChild(newItem, item);
                
                newItem.addEventListener('click', async (e) => {
                    e.preventDefault();
                    console.log('Navigation item clicked:', newItem.dataset.view);
                    
                    try {
                        // Remove active class from all items
                        document.querySelectorAll('.nav-item').forEach(nav => {
                            nav.classList.remove('active');
                        });
                        
                        // Add active class to clicked item
                        newItem.classList.add('active');

                        // Hide all views
                        document.querySelectorAll('.content-view').forEach(view => {
                            view.classList.remove('active');
                            console.log('Hiding view:', view.id);
                        });
                        
                        // Show the selected view
                        const viewId = `${newItem.dataset.view}-view`;
                        console.log('Attempting to show view:', viewId);
                        const targetView = document.getElementById(viewId);
                        
                        if (targetView) {
                            console.log('Found target view, showing it');
                            targetView.classList.add('active');
                            
                            // Load transcripts if we're on the transcripts view
                            if (newItem.dataset.view === 'transcripts') {
                                console.log('Loading transcripts for transcripts view...');
                                await loadPastTranscripts();
                            }
                        } else {
                            console.error('Target view not found:', viewId);
                        }
                    } catch (error) {
                        console.error('Error handling navigation click:', error);
                    }
                });
            });
        }

        // Call setupNavigation when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            console.log('DOM loaded, setting up navigation...');
            setupNavigation();
            
            // ... rest of the existing DOMContentLoaded code ...
        });

        // Wait for DOM to be fully loaded
        document.addEventListener('DOMContentLoaded', () => {
            // Auth form handling
            let isSignUp = false;
            const authForm = document.getElementById('authForm');
            const authToggleBtn = document.getElementById('authToggleBtn');
            const authTitle = document.getElementById('authTitle');
            const authToggleText = document.getElementById('authToggleText');
            const authSubmit = document.getElementById('authSubmit');
            const authError = document.getElementById('authError');

            // Settings menu functionality
            const settingsCog = document.getElementById('settingsCog');
            const settingsDropdown = document.querySelector('.settings-dropdown');
            const logoutBtn = document.getElementById('logoutBtn');

            if (settingsCog) {
                settingsCog.addEventListener('click', (e) => {
                    e.stopPropagation();
                    settingsDropdown.classList.toggle('show');
                });
            }

            // Close dropdown when clicking outside
            document.addEventListener('click', (e) => {
                if (!settingsCog?.contains(e.target) && !settingsDropdown?.contains(e.target)) {
                    settingsDropdown?.classList.remove('show');
                }
            });

            if (logoutBtn) {
                logoutBtn.addEventListener('click', async (e) => {
                    e.preventDefault();
                    console.log('Starting logout process...');

                    try {
                        // Clean up WebSocket connection if it exists
                        if (ws) {
                            console.log('Closing WebSocket connection...');
                            ws.close();
                            ws = null;
                        }

                        // Unsubscribe from real-time updates
                        if (transcriptsSubscription) {
                            console.log('Unsubscribing from real-time updates...');
                            transcriptsSubscription.unsubscribe();
                            transcriptsSubscription = null;
                        }

                        // Clear any active recordings
                        if (isRecording) {
                            console.log('Stopping active recording...');
                            await stopRecording();
                        }

                        // Clear session data
                        currentUser = null;
                        currentSession = null;
                        fullTranscript = [];

                        // Sign out from Supabase
                        console.log('Signing out from Supabase...');
                        const { error } = await supabase.auth.signOut();
                        if (error) throw error;

                        // Update UI
                        document.getElementById('authContainer').style.display = 'flex';
                        document.getElementById('mainContent').style.display = 'none';
                        
                        // Clear any notifications
                        const notification = document.getElementById('notification');
                        if (notification) {
                            notification.remove();
                        }

                        // Reload the page to ensure clean state
                        console.log('Logout successful, reloading page...');
                        window.location.reload();
                    } catch (error) {
                        console.error('Error during logout:', error);
                        showNotification('Error during logout. Please try again.');
                    }
                });
            }

            // Recording elements
            const startRecordBtn = document.getElementById('startRecord');
            const stopRecordBtn = document.getElementById('stopRecord');
            const saveTranscriptBtn = document.getElementById('saveTranscript');
            const recordingStatus = document.getElementById('recordingStatus');
            const transcriptSection = document.getElementById('transcriptSection');
            const transcript = document.getElementById('transcript');
            const qaSection = document.getElementById('qaSection');
            const askButton = document.getElementById('askButton');

            // Fix the auth toggle button
            if (authToggleBtn) {
                authToggleBtn.addEventListener('click', () => {
                    isSignUp = !isSignUp;
                    authTitle.textContent = isSignUp ? 'Sign Up' : 'Sign In';
                    authSubmit.textContent = isSignUp ? 'Sign Up' : 'Sign In';
                    authToggleText.textContent = isSignUp ? 'Already have an account?' : "Don't have an account?";
                    authToggleBtn.textContent = isSignUp ? 'Sign In' : 'Sign Up';
                    authError.style.display = 'none';
                });
            }

            // Auth form submission
            if (authForm) {
                authForm.addEventListener('submit', async (e) => {
                    e.preventDefault();
                    const email = document.getElementById('authEmail').value;
                    const password = document.getElementById('authPassword').value;

                    try {
                        if (isSignUp) {
                            console.log('Starting sign up process...');
                            const { data, error } = await supabase.auth.signUp({
                                email,
                                password,
                                options: {
                                    data: {
                                        name: email.split('@')[0]
                                    }
                                }
                            });
                            
                            if (error) {
                                console.error('Sign up error:', error);
                                throw error;
                            }
                            
                            console.log('Auth sign up successful:', data);
                            
                            // Create user record in our users table
                            if (data.user) {
                                try {
                                    console.log('Creating user record for:', data.user.id);
                                    
                                    // Create new user record directly without checking first
                                    const { data: userData, error: userError } = await supabase
                                        .from('users')
                                        .insert([{
                                            id: data.user.id,
                                            email: data.user.email,
                                            name: data.user.email.split('@')[0],
                                            created_at: new Date().toISOString()
                                        }])
                                        .select()
                                        .single();
                                    
                                    if (userError) {
                                        console.error('Error creating user record:', userError);
                                        // If it's an RLS error, the user might already exist
                                        if (userError.code === '42501') {
                                            console.log('RLS policy violation - user might already exist');
                                            authError.textContent = 'Account created successfully! Please check your email for verification.';
                                            authError.style.display = 'block';
                                            authError.style.color = '#4CAF50';
                                        } else {
                                            authError.textContent = 'Account created but profile setup failed. Please try logging in.';
                                            authError.style.display = 'block';
                                            authError.style.color = '#ff9800';
                                        }
                                    } else {
                                        console.log('User record created successfully:', userData);
                                        authError.textContent = 'Account created successfully! Please check your email for verification.';
                                        authError.style.display = 'block';
                                        authError.style.color = '#4CAF50';
                                    }
                                } catch (userError) {
                                    console.error('Error in user creation:', userError);
                                    // Even if user creation fails, the auth signup was successful
                                    authError.textContent = 'Account created successfully! Please check your email for verification.';
                                    authError.style.display = 'block';
                                    authError.style.color = '#4CAF50';
                                }
                            }
                        } else {
                            const { data, error } = await supabase.auth.signInWithPassword({
                                email,
                                password
                            });
                            if (error) throw error;
                            
                            // Ensure we have a session after sign in
                            const { data: { session }, error: sessionError } = await supabase.auth.getSession();
                            if (sessionError) throw sessionError;
                            
                            if (session) {
                                console.log('Successfully signed in with session');
                                currentUser = session.user;
                                currentSession = session;
                                document.getElementById('authContainer').style.display = 'none';
                                document.getElementById('mainContent').style.display = 'block';
                                updateUserProfile(session.user);
                            }
                        }
                    } catch (error) {
                        console.error('Auth error:', error);
                        authError.textContent = error.message || 'An error occurred during authentication';
                        authError.style.display = 'block';
                        authError.style.color = '#f44336';
                    }
                });
            }

            // Recording functionality
            if (startRecordBtn) {
                startRecordBtn.addEventListener('click', async () => {
                    try {
                        console.log('Start recording button clicked');
                        isRecording = true;  // Set isRecording to true when starting
                        
                        // Check if we have a stored session
                        if (!currentSession) {
                            console.error('No stored session found');
                            throw new Error('No active session found. Please log in again.');
                        }

                        console.log('Using stored session:', {
                            userEmail: currentSession.user.email,
                            userId: currentSession.user.id,
                            accessToken: currentSession.access_token ? 'Present' : 'Missing'
                        });

                        // Store the session for later use
                        currentUser = currentSession.user;
                        console.log('Session validated, proceeding with recording setup');

                        // Request microphone access
                        console.log('Requesting microphone access...');
                        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                        console.log('Microphone access granted');

                        // Start the recording process
                        console.log('Starting new recording...');
                        startNewRecording();
                        startMeeting();
                        
                        // Update UI
                        console.log('Updating UI for recording state...');
                        startRecordBtn.style.display = 'none';
                        stopRecordBtn.style.display = 'inline-flex';
                        saveTranscriptBtn.style.display = 'none';
                        recordingStatus.innerHTML = `
                            <div class="recording-indicator" style="display: inline-block;"></div>
                            Recording...
                        `;
                        transcript.innerHTML = 'Listening...';
                        transcriptSection.style.display = 'block';
                        qaSection.style.display = 'none';
                        
                        console.log('Recording started successfully');
                    } catch (error) {
                        console.error('Error in start recording process:', error);
                        alert('Error: ' + error.message);
                        
                        // Reset UI in case of error
                        startRecordBtn.style.display = 'inline-flex';
                        stopRecordBtn.style.display = 'none';
                        saveTranscriptBtn.style.display = 'none';
                        recordingStatus.innerHTML = '';
                    }
                });
            }

            if (stopRecordBtn) {
                stopRecordBtn.addEventListener('click', async () => {
                    if (ws) {
                        try {
                            console.log('Stop recording button clicked');
                            isRecording = false;  // Set isRecording to false when stopping
                            
                            recordingStatus.innerHTML = 'Stopping recording and saving transcript...';

                            // First close the WebSocket connection
                            console.log('Closing WebSocket connection...');
                            ws.onmessage = null;
                            ws.onerror = null;
                            ws.onclose = null;
                            ws.close();
                            ws = null;

                            // Wait a moment to ensure all messages are processed
                            await new Promise(resolve => setTimeout(resolve, 1000));

                            // Save the transcript directly
                            if (fullTranscript && fullTranscript.length > 0) {
                                try {
                                    if (!currentSession) {
                                        throw new Error('No active session found. Please log in again.');
                                    }

                                    console.log('Preparing transcript data...');
                                    const transcriptText = fullTranscript
                                        .map(line => `${line.displayName}: ${line.text}`)
                                        .join('\n');

                                    console.log('Current session:', {
                                        user: currentSession.user,
                                        accessToken: currentSession.access_token ? 'Present' : 'Missing'
                                    });

                                    const requestBody = {
                                        id: currentSession.user.id,
                                        title: `Meeting ${new Date().toLocaleString()}`,
                                        content: transcriptText,
                                        duration: Math.round((new Date() - meetingStartTime) / 1000),
                                        speaker_count: new Set(fullTranscript.map(t => t.speakerId)).size,
                                        summary: ''
                                    };

                                    console.log('Saving transcript with data:', {
                                        id: currentSession.user.id,
                                        title: requestBody.title,
                                        contentLength: requestBody.content.length,
                                        duration: requestBody.duration,
                                        speakerCount: requestBody.speaker_count,
                                        hasAccessToken: !!currentSession.access_token
                                    });

                                    console.log('Saving transcript to database...');
                                    const response = await fetch('/api/transcripts', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json',
                                            'Authorization': `Bearer ${currentSession.access_token}`
                                        },
                                        body: JSON.stringify(requestBody)
                                    });

                                    const result = await response.json();
                                    
                                    if (response.ok) {
                                        console.log('Transcript saved successfully:', result);
                                        alert('Transcript saved successfully!');
                                    } else {
                                        console.error('Failed to save transcript:', result);
                                        throw new Error(result.error || 'Failed to save transcript');
                                    }
                                } catch (error) {
                                    console.error('Error saving transcript:', error);
                                    alert('Error saving transcript: ' + error.message);
                                }
                            } else {
                                console.log('No transcript content to save');
                                alert('No transcript content to save');
                            }

                            // Update UI
                            console.log('Updating UI...');
                            const startRecordBtn = document.getElementById('startRecord');
                            const stopRecordBtn = document.getElementById('stopRecord');
                            const saveTranscriptBtn = document.getElementById('saveTranscript');
                            
                            if (startRecordBtn) startRecordBtn.style.display = 'inline-flex';
                            if (stopRecordBtn) stopRecordBtn.style.display = 'none';
                            if (saveTranscriptBtn) saveTranscriptBtn.style.display = 'none';
                            recordingStatus.innerHTML = '';
                            
                            console.log('Recording stopped and UI updated');
                        } catch (error) {
                            console.error('Error in stop recording process:', error);
                            alert('Error stopping recording: ' + error.message);
                            
                            // Force UI update even if there's an error
                            const startRecordBtn = document.getElementById('startRecord');
                            const stopRecordBtn = document.getElementById('stopRecord');
                            const saveTranscriptBtn = document.getElementById('saveTranscript');
                            
                            if (startRecordBtn) startRecordBtn.style.display = 'inline-flex';
                            if (stopRecordBtn) stopRecordBtn.style.display = 'none';
                            if (saveTranscriptBtn) saveTranscriptBtn.style.display = 'none';
                            recordingStatus.innerHTML = '';
                        }
                    }
                });
            }

            // Save transcript functionality
            if (saveTranscriptBtn) {
                saveTranscriptBtn.removeEventListener('click', () => {});
            }

            if (askButton) {
                askButton.addEventListener('click', async () => {
                    const question = document.getElementById('questionInput').value.trim();
                    const answerDiv = document.getElementById('answer');
                    
                    if (!question) {
                        alert('Please enter a question');
                        return;
                    }
                    
                    try {
                        answerDiv.innerHTML = 'Thinking...';
                        answerDiv.className = 'answer-box active';
                        
                        const transcriptText = fullTranscript
                            .map(line => `${line.displayName}: ${line.text}`)
                            .join('\n');
                        
                        const answer = await askQuestion(question, transcriptText);
                        answerDiv.innerHTML = answer;
                    } catch (error) {
                        answerDiv.innerHTML = 'Sorry, I had trouble answering that question. Please try again.';
                        console.error('Error:', error);
                    }
                });
            }

            // Navigation setup
            document.querySelectorAll('.nav-item').forEach(item => {
                item.addEventListener('click', async () => {
                    console.log('Navigation item clicked:', item.dataset.view);
                    
                    // Remove active class from all items
                    document.querySelectorAll('.nav-item').forEach(nav => {
                        nav.classList.remove('active');
                    });
                    
                    // Add active class to clicked item
                    item.classList.add('active');

                    // Hide all views
                    document.querySelectorAll('.content-view').forEach(view => {
                        view.classList.remove('active');
                    });
                    
                    // Show the selected view
                    const viewId = `${item.dataset.view}-view`;
                    const targetView = document.getElementById(viewId);
                    if (targetView) {
                        targetView.classList.add('active');
                        
                        // Load transcripts if we're on the transcripts view
                        if (item.dataset.view === 'transcripts') {
                            console.log('Loading transcripts for transcripts view...');
                            await loadPastTranscripts();
                        }
                    }
                });
            });

            // Remove the old event listener if it exists
            const oldTranscriptsNav = document.querySelector('[data-view="transcripts"]');
            if (oldTranscriptsNav) {
                const newTranscriptsNav = oldTranscriptsNav.cloneNode(true);
                oldTranscriptsNav.parentNode.replaceChild(newTranscriptsNav, oldTranscriptsNav);
            }

            // Calendar view setup
            document.querySelector('[data-view="calendar"]')?.addEventListener('click', () => {
                initializeCalendar();
                loadMeetings();
            });

            document.querySelectorAll('.calendar-view-selector button').forEach(button => {
                button.addEventListener('click', () => {
                    document.querySelectorAll('.calendar-view-selector button').forEach(b => b.classList.remove('active'));
                    button.classList.add('active');
                });
            });
        });

        // Reset transcript and start new recording
        function startNewRecording() {
            console.log('Starting new recording, resetting fullTranscript');
            fullTranscript = [];  // Initialize as empty array
            meetingStartTime = new Date();
            console.log('fullTranscript after reset:', fullTranscript);
        }

        // User profile management
        function updateUserProfile(user) {
            const profileSection = document.querySelector('.profile-section');
            if (profileSection) {
                const nameElement = profileSection.querySelector('.profile-name');
                const emailElement = profileSection.querySelector('.profile-email');
                if (nameElement) nameElement.textContent = user.email.split('@')[0];
                if (emailElement) emailElement.textContent = user.email;
            }
        }

        // Load past transcripts from Supabase
        async function loadPastTranscripts() {
            console.log('Starting loadPastTranscripts function...');
            const container = document.getElementById('transcriptsContainer');
            if (!container) {
                console.error('Transcripts container not found');
                return;
            }

            try {
                console.log('Loading past transcripts...');
                
                // Ensure we have a valid session before proceeding
                console.log('Getting session...');
                const session = await ensureValidSession();
                console.log('Session details:', {
                    hasSession: !!session,
                    hasAccessToken: !!session?.access_token,
                    userId: session?.user?.id,
                    userEmail: session?.user?.email,
                    tokenExpiry: session?.expires_at ? new Date(session.expires_at * 1000).toISOString() : 'N/A',
                    accessTokenLength: session?.access_token?.length,
                    accessToken: session?.access_token ? `${session.access_token.substring(0, 10)}...` : 'none'
                });

                if (!session?.access_token) {
                    throw new Error('No access token available');
                }

                const requestHeaders = {
                    'Authorization': `Bearer ${session.access_token}`,
                    'Accept': 'application/json'
                };

                console.log('Making fetch request to /api/transcripts with headers:', {
                    ...requestHeaders,
                    'Authorization': 'Bearer [REDACTED]'
                });

                const response = await fetch('/api/transcripts', {
                    method: 'GET',
                    headers: requestHeaders
                });

                console.log('Transcript fetch response:', {
                    status: response.status,
                    ok: response.ok,
                    statusText: response.statusText,
                    headers: Object.fromEntries(response.headers.entries()),
                    url: response.url
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    console.error('Server error response:', errorData);
                    throw new Error(errorData.error || 'Failed to fetch transcripts');
                }

                const transcripts = await response.json();
                console.log('Received transcripts:', {
                    count: transcripts.length,
                    firstTranscript: transcripts[0] ? {
                        id: transcripts[0].id,
                        transcript_id: transcripts[0].transcript_id,
                        title: transcripts[0].title,
                        created_at: transcripts[0].created_at,
                        content_length: transcripts[0].content?.length
                    } : null,
                    rawData: transcripts
                });

                if (!Array.isArray(transcripts)) {
                    console.error('Invalid transcripts data:', transcripts);
                    throw new Error('Invalid transcripts data received from server');
                }

                console.log('Rendering transcripts...');
                renderTranscripts(transcripts);
                console.log('Transcripts rendered successfully');
            } catch (error) {
                console.error('Error in loadPastTranscripts:', error);
                console.error('Error stack:', error.stack);
                if (error.message === 'No active session') {
                    // Redirect to login if no session
                    document.getElementById('authContainer').style.display = 'flex';
                    document.getElementById('mainContent').style.display = 'none';
                }
                container.innerHTML = `
                    <div class="error">
                        <h2>Error loading transcripts</h2>
                        <p>${error.message}</p>
                    </div>
                `;
            }
        }

        // Update the real-time subscription handler
        function handleTranscriptChange(payload) {
            console.log('Handling transcript change:', payload);
            const container = document.getElementById('transcriptsContainer');
            if (!container) {
                console.error('Transcripts container not found');
                return;
            }

            try {
                // Get current transcripts from the DOM
                const currentTranscripts = Array.from(container.querySelectorAll('.transcript-card')).map(card => ({
                    id: card.dataset.transcriptId,
                    created_at: card.dataset.createdAt,
                    title: card.querySelector('.transcript-title').textContent,
                    summary: card.querySelector('.transcript-summary').textContent,
                    duration: parseInt(card.dataset.duration)
                }));

                let updatedTranscripts = [...currentTranscripts];

                switch (payload.eventType) {
                    case 'INSERT':
                        console.log('Inserting new transcript:', payload.new);
                        // Add new transcript at the beginning
                        updatedTranscripts.unshift(payload.new);
                        break;
                    case 'UPDATE':
                        console.log('Updating transcript:', payload.new);
                        // Update existing transcript
                        updatedTranscripts = updatedTranscripts.map(t => 
                            t.id === payload.new.id ? payload.new : t
                        );
                        break;
                    case 'DELETE':
                        console.log('Deleting transcript:', payload.old);
                        // Remove deleted transcript
                        updatedTranscripts = updatedTranscripts.filter(t => t.id !== payload.old.id);
                        break;
                    default:
                        console.log('Unknown event type:', payload.eventType);
                        return;
                }

                console.log('Updated transcripts:', {
                    count: updatedTranscripts.length,
                    firstTranscript: updatedTranscripts[0] ? {
                        id: updatedTranscripts[0].id,
                        title: updatedTranscripts[0].title
                    } : null
                });

                // Re-render the transcripts
                renderTranscripts(updatedTranscripts);

                // Show a notification for new transcripts
                if (payload.eventType === 'INSERT') {
                    showNotification('New transcript available!');
                }
            } catch (error) {
                console.error('Error handling transcript change:', error);
                // Reload all transcripts on error
                loadPastTranscripts();
            }
        }

        // Update the renderTranscripts function
        function renderTranscripts(transcripts) {
            console.log('Rendering transcripts:', {
                count: transcripts.length,
                firstTranscript: transcripts[0] ? {
                    id: transcripts[0].id,
                    title: transcripts[0].title
                } : null
            });

            const container = document.getElementById('transcriptsContainer');
            if (!container) {
                console.error('Transcripts container not found');
                return;
            }

            if (!Array.isArray(transcripts) || transcripts.length === 0) {
                container.innerHTML = `
                    <div class="no-transcripts">
                        <h2>No transcripts found</h2>
                        <p>Your meeting transcripts will appear here</p>
                    </div>
                `;
                return;
            }

            // Sort transcripts by created_at in descending order
            const sortedTranscripts = [...transcripts].sort((a, b) => 
                new Date(b.created_at) - new Date(a.created_at)
            );

            container.innerHTML = sortedTranscripts.map(transcript => `
                <div class="transcript-card" 
                     data-transcript-id="${transcript.id}"
                     data-created-at="${transcript.created_at}"
                     data-duration="${transcript.duration || 0}">
                    <div class="transcript-card-content">
                        <div class="transcript-card-top">
                            <div class="transcript-date">${formatDate(transcript.created_at)}</div>
                            <div class="transcript-duration">
                                <i class="fas fa-clock"></i>
                                ${formatDuration(transcript.duration || 0)}
                            </div>
                        </div>
                        <h3 class="transcript-title">${transcript.title || 'Untitled Transcript'}</h3>
                        <p class="transcript-summary">${transcript.summary || 'No summary available'}</p>
                    </div>
                    <div class="transcript-card-actions">
                        <button class="view-transcript-btn" onclick="viewTranscript('${transcript.id}')">
                            <i class="fas fa-eye"></i>
                            View Transcript
                        </button>
                    </div>
                </div>
            `).join('');
        }

        // Add notification function
        function showNotification(message) {
            // Create notification element if it doesn't exist
            let notification = document.getElementById('notification');
            if (!notification) {
                notification = document.createElement('div');
                notification.id = 'notification';
                notification.className = 'notification';
                document.body.appendChild(notification);
            }

            // Set message and show notification
            notification.textContent = message;
            notification.classList.add('show');

            // Hide notification after 3 seconds
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }

        // Add cleanup when leaving the transcripts view
        document.querySelector('[data-view="transcripts"]')?.addEventListener('click', () => {
            loadPastTranscripts();
        });

        // Add cleanup when leaving the page
        window.addEventListener('beforeunload', () => {
            if (transcriptsSubscription) {
                transcriptsSubscription.unsubscribe();
            }
        });

        // Meeting management
        async function startMeeting() {
            if (!ws) {
                try {
                    // Get current session before creating WebSocket
                    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
                    if (sessionError) {
                        console.error('Error getting session:', sessionError);
                        throw sessionError;
                    }
                    
                    if (!session) {
                        console.error('No active session found');
                        throw new Error('No active session found. Please log in again.');
                    }

                    console.log('Starting WebSocket connection with session:', {
                        hasSession: !!session,
                        userId: session.user.id,
                        hasAccessToken: !!session.access_token
                    });

                    ws = new WebSocket('ws://localhost:3000');
                    
                    ws.onopen = async () => {
                        console.log('WebSocket connection established, sending auth...');
                        // Send authentication message with token
                        ws.send(JSON.stringify({
                            type: 'auth',
                            token: session.access_token
                        }));
                        
                        startNewRecording();
                        // Show the transcript and Q&A sections when connection is established
                        const transcriptSection = document.getElementById('transcriptSection');
                        const qaSection = document.getElementById('qaSection');
                        if (transcriptSection) transcriptSection.style.display = 'block';
                        if (qaSection) qaSection.style.display = 'block';
                    };

                    ws.onmessage = (event) => {
                        if (!ws) return; // Don't process messages if connection is closed
                        
                        try {
                            console.log('Received WebSocket message:', event.data);
                            const data = JSON.parse(event.data);
                            console.log('Parsed WebSocket data:', data);
                            
                            // Handle auth response
                            if (data.type === 'auth_response') {
                                if (data.error) {
                                    console.error('WebSocket authentication failed:', data.error);
                                    ws.close();
                                    throw new Error('WebSocket authentication failed: ' + data.error);
                                }
                                console.log('WebSocket authenticated successfully');
                                return;
                            }
                            
                            // Skip empty messages
                            if (!data.text || data.text.trim() === '') {
                                console.log('Skipping empty message');
                                return;
                            }
                            
                            // Ensure data has the required fields
                            if (data.speakerId) {
                                // Add type if not present
                                if (!data.type) {
                                    data.type = 'final';
                                }
                                updateTranscriptionUI(data);
                            } else {
                                console.warn('Received incomplete transcript data:', data);
                            }
                        } catch (error) {
                            console.error('Error processing WebSocket message:', error);
                        }
                    };

                    ws.onclose = () => {
                        console.log('WebSocket connection closed');
                        ws = null;
                        
                        // Don't hide the sections on close, just update the UI
                        const transcriptSection = document.getElementById('transcriptSection');
                        const qaSection = document.getElementById('qaSection');
                        if (transcriptSection) transcriptSection.style.display = 'block';
                        if (qaSection) qaSection.style.display = 'block';
                    };

                    ws.onerror = (error) => {
                        console.error('WebSocket error:', error);
                        ws = null;
                    };
                } catch (error) {
                    console.error('Error creating WebSocket:', error);
                    ws = null;
                    alert('Error starting recording: ' + error.message);
                }
            }
        }

        // Load meetings from Supabase
        async function loadMeetings() {
            try {
                const { data: { session } } = await supabase.auth.getSession();
                if (!session) return;

                const { data: meetings, error } = await supabase
                    .from('meetings')
                    .select('*')
                    .order('created_at', { ascending: false });

                if (error) throw error;

                const meetingsList = document.getElementById('meetingsList');
                if (meetingsList) {
                    meetingsList.innerHTML = meetings.map(meeting => `
                        <div class="meeting-item">
                            <h3>${meeting.title}</h3>
                            <p>${meeting.description || ''}</p>
                            <small>${new Date(meeting.created_at).toLocaleString()}</small>
                        </div>
                    `).join('');
                }
            } catch (error) {
                console.error('Error loading meetings:', error);
            }
        }

        // Update transcription UI
        function updateTranscriptionUI(data) {
            const transcript = document.getElementById('transcript');
            if (!transcript) return;

            console.log('Updating transcription UI with data:', data);

            // Initialize fullTranscript if it doesn't exist
            if (!fullTranscript) {
                console.log('Initializing fullTranscript array');
                fullTranscript = [];
            }

            // Skip empty messages
            if (!data.text || data.text.trim() === '') {
                console.log('Skipping empty message in updateTranscriptionUI');
                return;
            }

            const speakerName = data.speakerId === 'Unknown' ? 'Unknown Speaker' : data.speakerId;
            const transcriptEntry = {
                speakerId: data.speakerId,
                displayName: speakerName,
                text: data.text,
                timestamp: new Date().toISOString(),
                type: data.type
            };

            if (data.type === 'interim') {
                // Update interim transcription
                const interimSpan = document.getElementById('interim-transcription');
                if (interimSpan) {
                    interimSpan.textContent = data.text;
                }
                
                // Add interim to fullTranscript if it's not already there
                const existingInterimIndex = fullTranscript.findIndex(
                    entry => entry.type === 'interim' && entry.speakerId === data.speakerId
                );
                
                if (existingInterimIndex !== -1) {
                    // Update existing interim entry
                    fullTranscript[existingInterimIndex] = transcriptEntry;
                } else {
                    // Add new interim entry
                    fullTranscript.push(transcriptEntry);
                }
                console.log('Updated interim in fullTranscript:', transcriptEntry);
            } else if (data.type === 'final') {
                console.log('Processing final transcription');
                // Add final transcription to the transcript
                const transcriptLine = document.createElement('div');
                transcriptLine.className = 'transcript-line';
                transcriptLine.innerHTML = `
                    <span class="speaker-name" data-speaker-id="${data.speakerId}">${speakerName}:</span>
                    <span class="transcript-text">${data.text}</span>
                `;
                transcript.appendChild(transcriptLine);
                
                // Clear interim transcription
                const interimSpan = document.getElementById('interim-transcription');
                if (interimSpan) {
                    interimSpan.textContent = '';
                }

                // Remove any interim entries for this speaker
                fullTranscript = fullTranscript.filter(
                    entry => !(entry.type === 'interim' && entry.speakerId === data.speakerId)
                );

                // Add final entry
                fullTranscript.push(transcriptEntry);
                console.log('Added final to fullTranscript:', transcriptEntry);
            }

            console.log('Current fullTranscript:', fullTranscript);
            console.log('Current fullTranscript length:', fullTranscript.length);

            // Scroll to bottom of transcript
            transcript.scrollTop = transcript.scrollHeight;
        }

        // Handle collapsible elements
        const collapsibleElements = document.querySelectorAll('.collapsible');
        collapsibleElements.forEach(element => {
            element.addEventListener('click', function() {
                this.classList.toggle('active');
                const content = this.nextElementSibling;
                if (content.style.display === 'block') {
                    content.style.display = 'none';
                } else {
                    content.style.display = 'block';
                }
            });
        });

        // Add a function to check session status
        async function checkSessionStatus() {
            try {
                const supabaseClient = await ensureSupabaseInitialized();
                const { data: { session }, error } = await supabaseClient.auth.getSession();
                console.log('Current session status:', {
                    hasSession: !!session,
                    hasError: !!error,
                    errorMessage: error?.message,
                    userEmail: session?.user?.email,
                    userId: session?.user?.id
                });
                return { session, error };
            } catch (error) {
                console.error('Error checking session status:', error);
                return { session: null, error };
            }
        }

        // Call checkSessionStatus on page load
        document.addEventListener('DOMContentLoaded', async () => {
            console.log('Checking initial session status...');
            await checkSessionStatus();
        });

        // Add a function to get session with timeout
        async function getSessionWithTimeout(timeoutMs = 5000) {
            return new Promise((resolve, reject) => {
                const timeoutId = setTimeout(() => {
                    reject(new Error('Session retrieval timed out'));
                }, timeoutMs);

                supabase.auth.getSession()
                    .then(response => {
                        clearTimeout(timeoutId);
                        resolve(response);
                    })
                    .catch(error => {
                        clearTimeout(timeoutId);
                        reject(error);
                    });
            });
        }

        // Function to save transcript
        async function saveTranscript(transcriptData) {
            try {
                // Get the current session
                const { data: { session }, error: sessionError } = await supabase.auth.getSession();
                if (sessionError) {
                    console.error('Session error:', sessionError);
                    throw sessionError;
                }
                
                if (!session) {
                    console.log('No active session, redirecting to login...');
                    window.location.href = '/';
                    return;
                }

                console.log('Saving transcript with session:', {
                    hasSession: !!session,
                    userId: session.user.id,
                    hasAccessToken: !!session.access_token,
                    hasRefreshToken: !!session.refresh_token
                });

                // Check if token is about to expire (within 5 minutes)
                const expiresAt = session.expires_at * 1000; // Convert to milliseconds
                const now = Date.now();
                if (expiresAt - now < 5 * 60 * 1000) { // 5 minutes
                    console.log('Token about to expire, refreshing...');
                    const { data: { session: newSession }, error: refreshError } = await supabase.auth.refreshSession();
                    if (refreshError) {
                        console.error('Error refreshing session:', refreshError);
                        throw refreshError;
                    }
                    session = newSession;
                }

                const response = await fetch('/api/transcripts', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${session.access_token}`
                    },
                    body: JSON.stringify(transcriptData)
                });

                if (!response.ok) {
                    if (response.status === 401) {
                        // Try to refresh the session
                        const { data: { session: newSession }, error: refreshError } = await supabase.auth.refreshSession();
                        if (refreshError) {
                            console.error('Error refreshing session:', refreshError);
                            throw refreshError;
                        }
                        
                        // Retry the request with the new token
                        const retryResponse = await fetch('/api/transcripts', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${newSession.access_token}`
                            },
                            body: JSON.stringify(transcriptData)
                        });
                        
                        if (!retryResponse.ok) {
                            throw new Error('Failed to save transcript after token refresh');
                        }
                        
                        return await retryResponse.json();
                    }
                    throw new Error('Failed to save transcript');
                }

                return await response.json();
            } catch (error) {
                console.error('Error saving transcript:', error);
                throw error;
            }
        }

        // Format date to DD/MM/YYYY
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('en-GB', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            });
        }

        // Format duration to HH:MM:SS
        function formatDuration(seconds) {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const remainingSeconds = seconds % 60;

            return [hours, minutes, remainingSeconds]
                .map(val => val.toString().padStart(2, '0'))
                .join(':');
        }

        // Add search and filter functionality
        document.getElementById('transcriptSearch')?.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            const cards = document.querySelectorAll('.transcript-card');
            
            cards.forEach(card => {
                const title = card.querySelector('.transcript-title').textContent.toLowerCase();
                const summary = card.querySelector('.transcript-summary').textContent.toLowerCase();
                const date = card.querySelector('.transcript-date').textContent.toLowerCase();
                
                const matches = title.includes(searchTerm) || 
                               summary.includes(searchTerm) || 
                               date.includes(searchTerm);
                
                card.style.display = matches ? 'block' : 'none';
            });
        });

        document.getElementById('transcriptFilter')?.addEventListener('change', (e) => {
            const filter = e.target.value;
            const cards = document.querySelectorAll('.transcript-card');
            const now = new Date();
            
            cards.forEach(card => {
                const date = new Date(card.querySelector('.transcript-date').textContent);
                let show = true;
                
                switch (filter) {
                    case 'today':
                        show = date.toDateString() === now.toDateString();
                        break;
                    case 'week':
                        const weekAgo = new Date(now.setDate(now.getDate() - 7));
                        show = date >= weekAgo;
                        break;
                    case 'month':
                        const monthAgo = new Date(now.setMonth(now.getMonth() - 1));
                        show = date >= monthAgo;
                        break;
                }
                
                card.style.display = show ? 'block' : 'none';
            });
        });

        // Update navigation to load transcripts when clicking the transcripts tab
        document.querySelector('[data-view="transcripts"]')?.addEventListener('click', () => {
            loadPastTranscripts();
        });

        // Add the viewTranscript function
        function viewTranscript(transcriptId) {
            // Prevent the card click event from firing
            event.stopPropagation();
            
            // TODO: Implement transcript viewing functionality
            console.log('Viewing transcript:', transcriptId);
            // You can implement the actual viewing logic here
            // For example, opening a modal or navigating to a detailed view
        }

        // Add a function to ensure we have a valid session
        async function ensureValidSession() {
            try {
                console.log('Ensuring valid session...');
                const { data: { session }, error } = await supabase.auth.getSession();
                
                if (error) {
                    console.error('Error getting session:', error);
                    throw error;
                }

                if (!session) {
                    console.error('No session found');
                    throw new Error('No active session');
                }

                // Check if the token is expired
                const tokenExpiry = new Date(session.expires_at * 1000);
                if (tokenExpiry <= new Date()) {
                    console.log('Token expired, refreshing...');
                    const { data: { session: newSession }, error: refreshError } = await supabase.auth.refreshSession();
                    if (refreshError) throw refreshError;
                    if (!newSession) throw new Error('Failed to refresh session');
                    currentSession = newSession;
                    return newSession;
                }

                currentSession = session;
                return session;
            } catch (error) {
                console.error('Error ensuring valid session:', error);
                throw error;
            }
        }
    </script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', sans-serif;
        }

        body {
            background-color: #f5f7fb;
            color: #1a1a1a;
            line-height: 1.6;
            display: flex;
            min-height: 100vh;
        }

        /* Side Menu Styles */
        .side-menu {
            width: 300px;
            background-color: white;
            border-right: 1px solid #e0e0e0;
            display: flex;
            flex-direction: column;
            height: 100vh;
            position: fixed;
            left: 0;
            top: 0;
        }

        .side-menu-header {
            padding: 2rem;
            border-bottom: 1px solid #e0e0e0;
        }

        .side-menu-content {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
        }

        .side-menu-footer {
            padding: 1rem;
            border-top: 1px solid #e0e0e0;
        }

        .profile-section {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 0.5rem;
            border-radius: 8px;
            transition: background-color 0.2s;
            cursor: pointer;
            position: relative;
            z-index: 999;
        }

        .profile-section:hover {
            background-color: #f5f7fb;
        }

        .profile-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #2196F3;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
        }

        .profile-info {
            flex: 1;
        }

        .profile-name {
            font-weight: 500;
            color: #1a1a1a;
        }

        .profile-email {
            font-size: 0.875rem;
            color: #666;
        }

        /* Usage Bar Styles */
        .usage-section {
            padding: 1rem;
            border-top: 1px solid #e0e0e0;
        }

        .usage-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
        }

        .usage-title {
            font-size: 0.875rem;
            color: #666;
        }

        .usage-amount {
            font-size: 0.875rem;
            font-weight: 500;
            color: #1a1a1a;
        }

        .usage-bar {
            width: 100%;
            height: 6px;
            background-color: #e0e0e0;
            border-radius: 3px;
            overflow: hidden;
        }

        .usage-progress {
            height: 100%;
            background-color: #2196F3;
            border-radius: 3px;
            transition: width 0.3s ease;
        }

        .usage-warning {
            background-color: #ff9800;
        }

        .usage-critical {
            background-color: #f44336;
        }

        /* Main Content Styles */
        .main-content {
            flex: 1;
            margin-left: 300px;
            padding: 2rem;
            max-width: calc(100% - 300px);
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 2rem;
        }

        header {
            margin-bottom: 3rem;
            text-align: center;
        }

        h1 {
            font-size: 2.5rem;
            font-weight: 600;
            color: #1a1a1a;
            margin-bottom: 1rem;
        }

        .upload-box {
            background-color: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }

        .file-input {
            margin-bottom: 1.5rem;
        }

        input[type="file"] {
            width: 100%;
            padding: 0.75rem;
            border: 2px dashed #e0e0e0;
            border-radius: 8px;
            background-color: #fafafa;
            cursor: pointer;
            transition: border-color 0.3s ease;
        }

        input[type="file"]:hover {
            border-color: #2196F3;
        }

        button {
            background-color: #2196F3;
            color: white;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        button:hover {
            background-color: #1976D2;
        }

        #status {
            margin: 1rem 0;
            padding: 0.75rem;
            border-radius: 8px;
            font-weight: 500;
        }

        .status-processing {
            background-color: #fff8e1;
            color: #f57f17;
        }

        .status-complete {
            background-color: #e8f5e9;
            color: #2e7d32;
        }

        .status-error {
            background-color: #ffebee;
            color: #c62828;
        }

        .summary-section {
            background-color: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
        }

        .summary-section h2 {
            color: #1a1a1a;
            font-size: 1.5rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }

        .transcript-section {
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .collapsible {
            background-color: white;
            color: #1a1a1a;
            font-weight: 500;
            padding: 1.5rem;
            width: 100%;
            text-align: left;
            border-bottom: 1px solid #f0f0f0;
        }

        .collapsible:hover {
            background-color: #fafafa;
        }

        .transcript-content {
            padding: 1.5rem;
            background-color: white;
        }

        .speaker-name {
            color: #2196F3;
            font-weight: 500;
            cursor: pointer;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            transition: background-color 0.3s ease;
        }

        .speaker-name:hover {
            background-color: #e3f2fd;
        }

        .speaker-name-edit {
            font-family: inherit;
            font-size: inherit;
            font-weight: 500;
            color: #2196F3;
            border: 2px solid #2196F3;
            border-radius: 4px;
            padding: 0.25rem 0.5rem;
            margin: 0;
            width: auto;
            min-width: 120px;
        }

        .speaker-name-edit:focus {
            outline: none;
            box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.2);
        }

        #summary {
            line-height: 1.8;
        }

        #transcript {
            max-height: 400px;
            overflow-y: auto;
            padding: 1rem;
            background-color: white;
            border-radius: 8px;
            box-shadow: inset 0 0 5px rgba(0,0,0,0.1);
            display: flex;
            flex-direction: column;
        }

        .transcript-container {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            flex-grow: 1;
        }

        .transcript-line {
            display: flex;
            gap: 0.5rem;
            align-items: baseline;
            animation: fadeIn 0.3s ease-in-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        #transcript div {
            margin-bottom: 0.5rem;
            line-height: 1.5;
        }

        #transcript .interim {
            color: #666;
            font-style: italic;
        }

        #transcript strong {
            color: #2196F3;
            font-weight: 500;
        }

        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }

            h1 {
                font-size: 2rem;
            }

            .upload-box, .summary-section, .transcript-section {
                padding: 1.5rem;
            }
        }

        .record-box {
            background-color: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }

        .record-controls {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .record-button {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            background-color: #dc3545;
        }

        .record-button:hover {
            background-color: #c82333;
        }

        .recording-status {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 500;
        }

        .recording-indicator {
            display: none;
            width: 12px;
            height: 12px;
            background-color: #dc3545;
            border-radius: 50%;
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.4; }
            100% { opacity: 1; }
        }

        .record-box h2 {
            margin-bottom: 1.5rem;
            color: #1a1a1a;
            font-size: 1.5rem;
            font-weight: 600;
        }

        .interim {
            color: #666;
            font-style: italic;
            margin-top: 0.5rem;
        }

        .qa-section {
            background-color: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }

        .qa-section h2 {
            color: #1a1a1a;
            font-size: 1.5rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }

        .question-input {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .question-input input {
            flex-grow: 1;
            padding: 0.75rem;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 1rem;
        }

        .question-input input:focus {
            border-color: #2196F3;
            outline: none;
            box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1);
        }

        .answer-box {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 1rem;
            margin-top: 1rem;
            display: none;
        }

        .answer-box.active {
            display: block;
            animation: fadeIn 0.3s ease-in-out;
        }

        /* Add styles for past transcripts section */
        .past-transcripts-section {
            background-color: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }

        .past-transcripts-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .search-bar {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .search-input {
            flex: 1;
            padding: 0.75rem;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            font-size: 1rem;
        }

        .filter-dropdown {
            padding: 0.75rem;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            background-color: white;
            font-size: 1rem;
        }

        .transcripts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .transcript-card {
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            cursor: pointer;
            position: relative;
        }

        .transcript-card-content {
            margin-bottom: 1rem;
        }

        .transcript-card-actions {
            display: flex;
            justify-content: flex-end;
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid #e0e0e0;
        }

        .view-transcript-btn {
            background-color: #2196F3;
            color: white;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 6px;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .view-transcript-btn:hover {
            background-color: #1976D2;
        }

        .view-transcript-btn i {
            font-size: 0.875rem;
        }

        .transcript-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .transcript-card-top {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
        }

        .transcript-date {
            font-size: 0.875rem;
            color: #2196F3;
            font-weight: 500;
        }

        .transcript-duration {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.875rem;
            color: #2196F3;
            font-weight: 500;
        }

        .transcript-duration i {
            font-size: 1rem;
            color: #2196F3;
        }

        .transcript-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: #1a1a1a;
            margin-bottom: 1rem;
        }

        .transcript-summary {
            color: #4a4a4a;
            margin-bottom: 1rem;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .transcript-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.875rem;
            color: #666;
        }

        .no-transcripts {
            grid-column: 1 / -1;
            text-align: center;
            padding: 3rem;
            background: white;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .error {
            grid-column: 1 / -1;
            text-align: center;
            padding: 2rem;
            color: #dc3545;
            background: #fff;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .loading {
            grid-column: 1 / -1;
            text-align: center;
            padding: 2rem;
            color: #666;
        }

        /* Main Content Views */
        .content-view {
            display: none;
        }

        .content-view.active {
            display: block;
        }

        .nav-item {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 1rem 1.5rem;
            color: #666;
            text-decoration: none;
            transition: all 0.2s ease;
            cursor: pointer;
        }

        .nav-item:hover {
            background-color: #f5f7fb;
            color: #2196F3;
        }

        .nav-item.active {
            color: #2196F3;
            background-color: #e3f2fd;
            font-weight: 500;
        }

        .nav-item i {
            font-size: 1.2rem;
            width: 24px;
            text-align: center;
        }

        /* Calendar Styles */
        .calendar-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 2rem;
        }

        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .calendar-nav {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .calendar-nav button {
            background: none;
            border: none;
            color: #666;
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 50%;
            transition: all 0.2s ease;
        }

        .calendar-nav button:hover {
            background: #f5f7fb;
            color: #2196F3;
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 0.5rem;
        }

        .calendar-weekday {
            text-align: center;
            font-weight: 500;
            color: #666;
            padding: 0.5rem;
        }

        .calendar-day {
            aspect-ratio: 1;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 0.5rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .calendar-day:hover {
            background: #f5f7fb;
            border-color: #2196F3;
        }

        .calendar-day.today {
            background: #e3f2fd;
            border-color: #2196F3;
            font-weight: 500;
        }

        .calendar-day.has-meeting {
            position: relative;
        }

        .calendar-day.has-meeting::after {
            content: '';
            position: absolute;
            bottom: 0.25rem;
            left: 50%;
            transform: translateX(-50%);
            width: 4px;
            height: 4px;
            border-radius: 50%;
            background: #2196F3;
        }

        .meeting-list {
            margin-top: 2rem;
        }

        .meeting-card {
            background: white;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .meeting-card:hover {
            border-color: #2196F3;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .meeting-time {
            font-size: 0.875rem;
            color: #2196F3;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }

        .meeting-title {
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .meeting-participants {
            font-size: 0.875rem;
            color: #2196F3;
        }

        .meeting-participants i {
            color: #2196F3;
        }

        .calendar-view-selector {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .calendar-view-selector button {
            background: none;
            border: 1px solid #e0e0e0;
            color: #666;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .calendar-view-selector button.active {
            background: #2196F3;
            border-color: #2196F3;
            color: white;
        }

        /* Auth UI Styles */
        .auth-container {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .auth-box {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
        }

        .auth-box h2 {
            margin-bottom: 1.5rem;
            color: #1a1a1a;
            font-size: 1.5rem;
            font-weight: 600;
        }

        .auth-form {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .auth-form input {
            padding: 0.75rem;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .auth-form input:focus {
            border-color: #2196F3;
            outline: none;
        }

        .auth-form button {
            background: #2196F3;
            color: white;
            padding: 0.75rem;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .auth-form button:hover {
            background: #1976D2;
        }

        .auth-toggle {
            margin-top: 1rem;
            text-align: center;
            color: #666;
        }

        .auth-toggle button {
            background: none;
            border: none;
            color: #2196F3;
            cursor: pointer;
            padding: 0;
            font-size: inherit;
        }

        .auth-toggle button:hover {
            text-decoration: underline;
        }

        .error-message {
            color: #f44336;
            margin-top: 0.5rem;
            font-size: 0.875rem;
        }

        .settings-menu {
            position: relative;
            cursor: pointer;
            z-index: 1000;
        }

        .settings-dropdown {
            display: none;
            position: absolute;
            right: 0;
            top: 100%;
            background-color: white;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            z-index: 1001;
            min-width: 150px;
            margin-top: 0.5rem;
        }

        .settings-dropdown.show {
            display: block;
        }

        .dropdown-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1rem;
            width: 100%;
            border: none;
            background: none;
            color: #1a1a1a;
            cursor: pointer;
            text-align: left;
            font-size: 0.875rem;
            transition: background-color 0.2s ease;
        }

        .dropdown-item:hover {
            background-color: #f5f7fb;
        }

        .dropdown-item i {
            width: 16px;
            color: #666;
        }

        /* Notification styles */
        .notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: #2196F3;
            color: white;
            padding: 1rem 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transform: translateY(100px);
            opacity: 0;
            transition: all 0.3s ease;
            z-index: 1000;
        }

        .notification.show {
            transform: translateY(0);
            opacity: 1;
        }

        /* Animation for new transcript cards */
        .transcript-card {
            animation: slideIn 0.3s ease-out;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
</head>
<body>
    <!-- Auth container - visible by default -->
    <div id="authContainer" class="auth-container">
        <div class="auth-box">
            <h2 id="authTitle">Sign In</h2>
            <form id="authForm" class="auth-form">
                <input type="email" id="authEmail" placeholder="Email" required>
                <input type="password" id="authPassword" placeholder="Password" required>
                <button type="submit" id="authSubmit">Sign In</button>
                <div id="authError" class="error-message" style="display: none;"></div>
            </form>
            <div class="auth-toggle">
                <span id="authToggleText">Don't have an account?</span>
                <button type="button" id="authToggleBtn">Sign Up</button>
            </div>
        </div>
    </div>

    <!-- Main content - hidden by default -->
    <div id="mainContent" style="display: none;">
        <aside class="side-menu">
            <div class="side-menu-header">
                <h1 style="font-size: 1.5rem;">Speech Recognition</h1>
            </div>
            <div class="side-menu-content">
                <div class="nav-item active" data-view="main">
                    <i class="fas fa-microphone"></i>
                    <span>Recording</span>
                </div>
                <div class="nav-item" data-view="transcripts">
                    <i class="fas fa-history"></i>
                    <span>Past Transcripts</span>
                </div>
                <div class="nav-item" data-view="calendar">
                    <i class="fas fa-calendar"></i>
                    <span>Calendar</span>
                </div>
            </div>
            <div class="side-menu-footer">
                <div class="profile-section">
                    <div class="profile-avatar">
                        <i class="fas fa-user"></i>
                    </div>
                    <div class="profile-info">
                        <div class="profile-name" id="profileName">Loading...</div>
                        <div class="profile-email" id="profileEmail">Loading...</div>
                    </div>
                    <div class="settings-menu">
                        <i class="fas fa-cog" id="settingsCog"></i>
                        <div class="settings-dropdown">
                            <button id="logoutBtn" class="dropdown-item">
                                <i class="fas fa-sign-out-alt"></i> Logout
                            </button>
                        </div>
                    </div>
                </div>
                <div class="usage-section">
                    <div class="usage-header">
                        <span class="usage-title">Monthly Usage</span>
                        <span class="usage-amount">180/300 minutes</span>
                    </div>
                    <div class="usage-bar">
                        <div class="usage-progress" style="width: 60%;"></div>
                    </div>
                </div>
            </div>
        </aside>

        <main class="main-content">
            <!-- Main Recording View -->
            <div class="content-view active" id="main-view">
                <div class="container">
                    <header>
                        <h1>Speech Recognition</h1>
                    </header>
                    
                    <div class="upload-box">
                        <h2>Upload Audio File</h2>
                        <form id="uploadForm" action="/upload" method="post" enctype="multipart/form-data">
                            <div class="file-input">
                                <input type="file" name="audioFile" id="audioFile" accept=".wav" required>
                            </div>
                            <button type="submit">Process Audio</button>
                        </form>
                        <div id="status"></div>
                    </div>

                    <div class="record-box">
                        <h2>Live Recording</h2>
                        <div class="recording-controls">
                            <button id="startRecord" class="action-button primary">
                                <i class="fas fa-microphone"></i> Start Recording
                            </button>
                            <button id="stopRecord" class="action-button secondary" style="display: none;">
                                <i class="fas fa-stop"></i> Stop Recording
                            </button>
                            <button id="saveTranscript" class="action-button primary" style="display: none;">
                                <i class="fas fa-save"></i> Save Transcript
                            </button>
                        </div>
                        <div id="recordingStatus" class="recording-status"></div>
                    </div>
                    
                    <div id="transcriptSection" class="transcript-section" style="display: none;">
                        <h2>Live Transcript</h2>
                        <div id="transcript" class="transcript"></div>
                    </div>

                    <div id="qaSection" class="qa-section" style="display: none;">
                        <h2>Ask Questions</h2>
                        <div class="qa-container">
                            <input type="text" id="questionInput" placeholder="Ask a question about the meeting...">
                            <button id="askButton" class="action-button primary">Ask</button>
                            <div id="answer" class="answer-box"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Past Transcripts View -->
            <div class="content-view" id="transcripts-view">
                <div class="container">
                    <div class="past-transcripts-section">
                        <div class="past-transcripts-header">
                            <h2>Past Transcripts</h2>
                            <div class="search-bar">
                                <input type="text" class="search-input" placeholder="Search transcripts..." id="transcriptSearch">
                                <select class="filter-dropdown" id="transcriptFilter">
                                    <option value="all">All Time</option>
                                    <option value="today">Today</option>
                                    <option value="week">This Week</option>
                                    <option value="month">This Month</option>
                                </select>
                            </div>
                        </div>
                        
                        <div id="transcriptsContainer" class="transcripts-grid">
                            <div class="loading">Loading transcripts...</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Add new Calendar View -->
            <div class="content-view" id="calendar-view">
                <div class="container">
                    <header>
                        <h1>Calendar</h1>
                    </header>

                    <div class="calendar-container">
                        <div class="calendar-view-selector">
                            <button class="active">Month</button>
                            <button>Week</button>
                            <button>Day</button>
                            <button>List</button>
                        </div>

                        <div class="calendar-header">
                            <div class="calendar-nav">
                                <button><i class="fas fa-chevron-left"></i></button>
                                <h2>February 2024</h2>
                                <button><i class="fas fa-chevron-right"></i></button>
                            </div>
                            <button class="action-button primary">
                                <i class="fas fa-plus"></i> New Meeting
                            </button>
                        </div>

                        <div class="calendar-grid">
                            <!-- Weekday headers -->
                            <div class="calendar-weekday">Sun</div>
                            <div class="calendar-weekday">Mon</div>
                            <div class="calendar-weekday">Tue</div>
                            <div class="calendar-weekday">Wed</div>
                            <div class="calendar-weekday">Thu</div>
                            <div class="calendar-weekday">Fri</div>
                            <div class="calendar-weekday">Sat</div>

                            <!-- Calendar days will be dynamically populated -->
                        </div>

                        <div class="meeting-list">
                            <h3>Upcoming Meetings</h3>
                            <div class="meeting-card">
                                <div class="meeting-time">Today, 2:00 PM - 3:00 PM</div>
                                <div class="meeting-title">Team Standup</div>
                                <div class="meeting-participants">
                                    <i class="fas fa-users"></i> 5 participants
                                </div>
                            </div>
                            <div class="meeting-card">
                                <div class="meeting-time">Tomorrow, 10:00 AM - 11:00 AM</div>
                                <div class="meeting-title">Project Review</div>
                                <div class="meeting-participants">
                                    <i class="fas fa-users"></i> 8 participants
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>
        const form = document.getElementById('uploadForm');
        const status = document.getElementById('status');
        const summary = document.getElementById('summary');
        const transcript = document.getElementById('transcript');
    
        function displayTranscript(transcriptText) {
        const lines = transcriptText.split('\n');
        
        const processedLines = lines.map(line => {
            return line.replace(/^(Speaker [^:]+|[^:]+):/, (match, speakerName) => {
                return `<span class="speaker-name" onclick="makeEditable(this)">${speakerName}</span>:`;
            });
        });

        transcript.innerHTML = processedLines.join('<br>');
    }

    
        function displaySummary(summaryText) {
            summary.textContent = summaryText;
        }
        // At the top of your script section, make these global
        window.speakerNames = new Map(); // Make speakerNames global
        // fullTranscript is already declared globally at the top

        function extractName(text) {
            // Common English words that shouldn't be treated as names
            const commonWords = new Set([
                'trying', 'testing', 'going', 'doing', 'making', 'taking', 'getting', 'seeing',
                'working', 'looking', 'thinking', 'saying', 'using', 'finding', 'giving',
                'this', 'that', 'here', 'there', 'what', 'where', 'when', 'why', 'how',
                'the', 'and', 'but', 'for', 'not', 'with', 'app', 'test', 'work', 'see',
                'recording', 'speaking', 'talking', 'calling', 'meeting', 'starting', 'stopping'
            ]);

            // More specific patterns for name introduction
            const patterns = [
                {
                    regex: /my name is (\w+)/i,
                    confidence: 1.0
                },
                {
                    regex: /i am (\w+)/i,
                    confidence: 0.8
                },
                {
                    regex: /i'm (\w+)/i,
                    confidence: 0.8
                },
                {
                    regex: /this is (\w+)/i,
                    confidence: 0.9
                },
                {
                    regex: /(?:hi|hello),? (?:i am|i'm) (\w+)/i,
                    confidence: 0.9
                }
            ];
            
            let bestMatch = null;
            let highestConfidence = 0;

            for (const pattern of patterns) {
                const match = text.match(pattern.regex);
                if (match) {
                    const potentialName = match[1];
                    
                    // Skip if the potential name is a common word
                    if (commonWords.has(potentialName.toLowerCase())) {
                        continue;
                    }
                    
                    // Basic name validation
                    if (
                        // Check if it starts with a capital letter
                        potentialName[0] === potentialName[0].toUpperCase() &&
                        // Check if rest is lowercase (typical for names)
                        potentialName.slice(1).toLowerCase() === potentialName.slice(1) &&
                        // Check minimum length
                        potentialName.length >= 2 &&
                        // Check if it's not just numbers
                        !/^\d+$/.test(potentialName)
                    ) {
                        if (pattern.confidence > highestConfidence) {
                            bestMatch = potentialName;
                            highestConfidence = pattern.confidence;
                        }
                    }
                }
            }

            // Only return the name if we're confident enough
            return highestConfidence >= 0.8 ? bestMatch : null;
        }

        // Update the makeEditable function
        window.makeEditable = function(element) {
            const currentName = element.textContent.trim();
            const speakerId = element.dataset.speakerId;
            
            const input = document.createElement('input');
            input.type = 'text';
            input.value = currentName;
            input.className = 'speaker-name-edit';
            input.dataset.speakerId = speakerId;
            
            // Replace span with input
            element.parentNode.replaceChild(input, element);
            input.focus();
            input.select();

            function saveEdit() {
                const newName = input.value.trim();
                if (!newName) {
                    cancelEdit();
                    return;
                }

                // Create new span element
                const span = document.createElement('span');
                span.className = 'speaker-name';
                span.onclick = () => window.makeEditable(span);  // Use window.makeEditable
                span.dataset.speakerId = speakerId;
                span.textContent = newName;
                
                // Replace input with span
                input.parentNode.replaceChild(span, input);

                // Update all other instances
                window.speakerNames.set(speakerId, newName);  // Use window.speakerNames
                updateSpeakerName(speakerId, newName);
            }

            function cancelEdit() {
                const span = document.createElement('span');
                span.className = 'speaker-name';
                span.onclick = () => window.makeEditable(span);  // Use window.makeEditable
                span.dataset.speakerId = speakerId;
                span.textContent = currentName;
                input.parentNode.replaceChild(span, input);
            }

            input.addEventListener('blur', saveEdit);
            input.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    saveEdit();
                } else if (e.key === 'Escape') {
                    e.preventDefault();
                    cancelEdit();
                }
            });
        };

    function updateSpeakerName(speakerId, newName) {
        // Update fullTranscript array
        fullTranscript = fullTranscript.map(line => ({
            ...line,
            displayName: line.speakerId === speakerId ? newName : line.displayName
        }));

        // Update all matching speaker names in the DOM
        const transcriptDiv = document.getElementById('transcript');
        const speakerSpans = transcriptDiv.querySelectorAll(`.speaker-name[data-speaker-id="${speakerId}"]`);
        speakerSpans.forEach(span => {
            span.textContent = newName;
        });
    }

    
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            status.textContent = 'Processing...';
            summary.textContent = '';
            transcript.textContent = '';
    
            const formData = new FormData(form);
            try {
                const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData
                });
                const result = await response.json();
                
                if (result.error) {
                    throw new Error(result.error);
                }
    
                status.textContent = 'Processing complete!';
    
                // Format and display transcript
                const transcriptText = result.transcript
                    .split('\n')
                    .map(line => line.trim())
                    .filter(line => line.length > 0)
                    .join('\n');
    
                // Format and display summary
                const summaryText = result.summary
                    .split('\n')
                    .map(line => line.trim())
                    .filter(line => line.length > 0)
                    .join('\n');
    
                // Show the sections
                document.getElementById('summarySection').style.display = 'block';
                document.getElementById('transcriptSection').style.display = 'block';
    
                // Update content using new display functions
                displayTranscript(transcriptText);
                displaySummary(summaryText);
    
            } catch (error) {
                status.textContent = 'Error processing file';
                console.error('Error:', error);
                alert('Error processing file: ' + error.message);
            }
        });
    </script>

</body>
</html>